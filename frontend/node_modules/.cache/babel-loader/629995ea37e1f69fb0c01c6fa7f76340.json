{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar normaliseInputMultiple_browser = require('./files/normalise-input-multiple.browser.js');\nvar modeToString = require('./mode-to-string.js');\nasync function multipartRequest(source, abortController, headers = {}) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n  for await (const {\n    content,\n    path,\n    mode,\n    mtime\n  } of normaliseInputMultiple_browser.normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n    if (index > 0) {\n      fileSuffix = `-${index}`;\n    }\n    let fieldName = type + fileSuffix;\n    const qs = [];\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString.modeToString(mode)}`);\n    }\n    if (mtime != null) {\n      const {\n        secs,\n        nsecs\n      } = mtime;\n      qs.push(`mtime=${secs}`);\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`);\n      }\n    }\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`;\n    }\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), {\n        type: 'application/x-directory'\n      }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n    index++;\n  }\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}\nexports.multipartRequest = multipartRequest;","map":{"version":3,"names":["Object","defineProperty","exports","value","normaliseInputMultiple_browser","require","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","content","path","mode","mtime","normaliseInput","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/ipfs-core-utils/cjs/src/multipart-request.browser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar normaliseInputMultiple_browser = require('./files/normalise-input-multiple.browser.js');\nvar modeToString = require('./mode-to-string.js');\n\nasync function multipartRequest(source, abortController, headers = {}) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n  for await (const {content, path, mode, mtime} of normaliseInputMultiple_browser.normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n    if (index > 0) {\n      fileSuffix = `-${ index }`;\n    }\n    let fieldName = type + fileSuffix;\n    const qs = [];\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${ modeToString.modeToString(mode) }`);\n    }\n    if (mtime != null) {\n      const {secs, nsecs} = mtime;\n      qs.push(`mtime=${ secs }`);\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${ nsecs }`);\n      }\n    }\n    if (qs.length) {\n      fieldName = `${ fieldName }?${ qs.join('&') }`;\n    }\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n    index++;\n  }\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}\n\nexports.multipartRequest = multipartRequest;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,8BAA8B,GAAGC,OAAO,CAAC,6CAA6C,CAAC;AAC3F,IAAIC,YAAY,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAEjD,eAAeE,gBAAgBA,CAACC,MAAM,EAAEC,eAAe,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACrE,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/B,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EACb,WAAW,MAAM;IAACC,OAAO;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAK,CAAC,IAAIf,8BAA8B,CAACgB,cAAc,CAACZ,MAAM,CAAC,EAAE;IACtG,IAAIa,UAAU,GAAG,EAAE;IACnB,MAAMC,IAAI,GAAGN,OAAO,GAAG,MAAM,GAAG,KAAK;IACrC,IAAIF,KAAK,GAAG,CAAC,EAAE;MACbO,UAAU,GAAG,IAAKP,KAAK,EAAG;IAC5B;IACA,IAAIS,SAAS,GAAGD,IAAI,GAAGD,UAAU;IACjC,MAAMG,EAAE,GAAG,EAAE;IACb,IAAIN,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKO,SAAS,EAAE;MACvCD,EAAE,CAACE,IAAI,CAAC,QAASpB,YAAY,CAACA,YAAY,CAACY,IAAI,CAAC,EAAG,CAAC;IACtD;IACA,IAAIC,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM;QAACQ,IAAI;QAAEC;MAAK,CAAC,GAAGT,KAAK;MAC3BK,EAAE,CAACE,IAAI,CAAC,SAAUC,IAAI,EAAG,CAAC;MAC1B,IAAIC,KAAK,IAAI,IAAI,EAAE;QACjBJ,EAAE,CAACE,IAAI,CAAC,eAAgBE,KAAK,EAAG,CAAC;MACnC;IACF;IACA,IAAIJ,EAAE,CAACK,MAAM,EAAE;MACbN,SAAS,GAAG,GAAIA,SAAS,IAAMC,EAAE,CAACM,IAAI,CAAC,GAAG,CAAC,EAAG;IAChD;IACA,IAAId,OAAO,EAAE;MACXJ,QAAQ,CAACmB,GAAG,CAACR,SAAS,EAAEP,OAAO,EAAEC,IAAI,IAAI,IAAI,GAAGe,kBAAkB,CAACf,IAAI,CAAC,GAAGQ,SAAS,CAAC;MACrF,MAAMQ,GAAG,GAAGlB,KAAK,GAAGC,OAAO,CAACkB,IAAI;MAChCvB,KAAK,CAACe,IAAI,CAAC;QACTS,IAAI,EAAElB,IAAI;QACVmB,KAAK,EAAErB,KAAK;QACZkB;MACF,CAAC,CAAC;MACFlB,KAAK,GAAGkB,GAAG;IACb,CAAC,MAAM,IAAIhB,IAAI,IAAI,IAAI,EAAE;MACvBL,QAAQ,CAACmB,GAAG,CAACR,SAAS,EAAE,IAAIc,IAAI,CAAC,CAAC,EAAE,CAAC,EAAEL,kBAAkB,CAACf,IAAI,CAAC,EAAE;QAAEK,IAAI,EAAE;MAA0B,CAAC,CAAC,CAAC;IACxG,CAAC,MAAM;MACL,MAAM,IAAIgB,KAAK,CAAC,qCAAqC,CAAC;IACxD;IACAxB,KAAK,EAAE;EACT;EACA,OAAO;IACLC,KAAK;IACLJ,KAAK;IACLD,OAAO;IACP6B,IAAI,EAAE3B;EACR,CAAC;AACH;AAEAV,OAAO,CAACK,gBAAgB,GAAGA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script"}