{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar cid = require('multiformats/cid');\nvar configure = require('../lib/configure.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar abortSignal = require('../lib/abort-signal.js');\nconst createPut = (codecs, options) => {\n  const fn = configure.configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n      const controller = new AbortController();\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\n        ...(await multipartRequest.multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return cid.CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};\nexports.createPut = createPut;","map":{"version":3,"names":["Object","defineProperty","exports","value","cid","require","configure","multipartRequest","toUrlSearchParams","abortSignal","createPut","codecs","options","fn","api","put","dagNode","settings","storeCodec","hashAlg","serialized","inputCodec","Uint8Array","Error","getCodec","encode","controller","AbortController","signal","res","post","timeout","searchParams","headers","data","json","CID","parse","Cid"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/ipfs-http-client/cjs/src/dag/put.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar configure = require('../lib/configure.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar abortSignal = require('../lib/abort-signal.js');\n\nconst createPut = (codecs, options) => {\n  const fn = configure.configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n      const controller = new AbortController();\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\n        ...await multipartRequest.multipartRequest([serialized], controller, settings.headers)\n      });\n      const data = await res.json();\n      return cid.CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACrC,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,mCAAmC,CAAC;AACnE,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AACjE,IAAII,WAAW,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAEnD,MAAMK,SAAS,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;EACrC,MAAMC,EAAE,GAAGP,SAAS,CAACA,SAAS,CAACQ,GAAG,IAAI;IACpC,MAAMC,GAAG,GAAG,MAAAA,CAAOC,OAAO,EAAEJ,OAAO,GAAG,CAAC,CAAC,KAAK;MAC3C,MAAMK,QAAQ,GAAG;QACfC,UAAU,EAAE,UAAU;QACtBC,OAAO,EAAE,UAAU;QACnB,GAAGP;MACL,CAAC;MACD,IAAIQ,UAAU;MACd,IAAIH,QAAQ,CAACI,UAAU,EAAE;QACvB,IAAI,EAAEL,OAAO,YAAYM,UAAU,CAAC,EAAE;UACpC,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;QACzE;QACAH,UAAU,GAAGJ,OAAO;MACtB,CAAC,MAAM;QACL,MAAME,UAAU,GAAG,MAAMP,MAAM,CAACa,QAAQ,CAACP,QAAQ,CAACC,UAAU,CAAC;QAC7DE,UAAU,GAAGF,UAAU,CAACO,MAAM,CAACT,OAAO,CAAC;QACvCC,QAAQ,CAACI,UAAU,GAAGJ,QAAQ,CAACC,UAAU;MAC3C;MACA,MAAMQ,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAMC,MAAM,GAAGnB,WAAW,CAACA,WAAW,CAACiB,UAAU,CAACE,MAAM,EAAEX,QAAQ,CAACW,MAAM,CAAC;MAC1E,MAAMC,GAAG,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,SAAS,EAAE;QACpCC,OAAO,EAAEd,QAAQ,CAACc,OAAO;QACzBH,MAAM;QACNI,YAAY,EAAExB,iBAAiB,CAACA,iBAAiB,CAACS,QAAQ,CAAC;QAC3D,IAAG,MAAMV,gBAAgB,CAACA,gBAAgB,CAAC,CAACa,UAAU,CAAC,EAAEM,UAAU,EAAET,QAAQ,CAACgB,OAAO,CAAC;MACxF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;MAC7B,OAAO/B,GAAG,CAACgC,GAAG,CAACC,KAAK,CAACH,IAAI,CAACI,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IACD,OAAOvB,GAAG;EACZ,CAAC,CAAC;EACF,OAAOF,EAAE,CAACD,OAAO,CAAC;AACpB,CAAC;AAEDV,OAAO,CAACQ,SAAS,GAAGA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script"}