{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar varint = require('./varint.js');\nvar digest = require('./hashes/digest.js');\nvar base58 = require('./bases/base58.js');\nvar base32 = require('./bases/base32.js');\nvar bytes = require('./bytes.js');\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n      case 0:\n        {\n          return this;\n        }\n      default:\n        {\n          const {\n            code,\n            multihash\n          } = this;\n          if (code !== DAG_PB_CODE) {\n            throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n          }\n          if (multihash.code !== SHA_256_CODE) {\n            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n          }\n          return CID.createV0(multihash);\n        }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n      case 0:\n        {\n          const {\n            code,\n            digest: digest$1\n          } = this.multihash;\n          const multihash = digest.create(code, digest$1);\n          return CID.createV1(this.code, multihash);\n        }\n      case 1:\n        {\n          return this;\n        }\n      default:\n        {\n          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n        }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {\n      bytes,\n      version,\n      _baseCache\n    } = this;\n    switch (version) {\n      case 0:\n        return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n      default:\n        return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {\n        version,\n        code,\n        multihash,\n        bytes\n      } = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {\n        version,\n        multihash,\n        code\n      } = value;\n      const digest$1 = digest.decode(multihash);\n      return CID.create(version, code, digest$1);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n      case 0:\n        {\n          if (code !== DAG_PB_CODE) {\n            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n          } else {\n            return new CID(version, code, digest, digest.bytes);\n          }\n        }\n      case 1:\n        {\n          const bytes = encodeCID(version, code, digest.bytes);\n          return new CID(version, code, digest, bytes);\n        }\n      default:\n        {\n          throw new Error('Invalid version');\n        }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes$1) {\n    const specs = CID.inspectBytes(bytes$1);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n    return [cid, bytes$1.subarray(specs.size)];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    case 'Q':\n      {\n        const decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, decoder.decode(`${base58.base58btc.prefix}${source}`)];\n      }\n    case base58.base58btc.prefix:\n      {\n        const decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, decoder.decode(source)];\n      }\n    case base32.base32.prefix:\n      {\n        const decoder = base || base32.base32;\n        return [base32.base32.prefix, decoder.decode(source)];\n      }\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n        return [source[0], base.decode(source)];\n      }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {\n    prefix\n  } = base;\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {\n    prefix\n  } = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\nexports.CID = CID;","map":{"version":3,"names":["Object","defineProperty","exports","value","varint","require","digest","base58","base32","bytes","CID","constructor","version","code","multihash","byteOffset","byteLength","asCID","_baseCache","Map","defineProperties","hidden","readonly","toV0","DAG_PB_CODE","Error","SHA_256_CODE","createV0","toV1","digest$1","create","createV1","equals","other","toString","base","toStringV0","base58btc","encoder","toStringV1","toJSON","hash","Symbol","toStringTag","for","isCID","deprecate","IS_CID_DEPRECATION","cidSymbol","toBaseEncodedString","codec","buffer","multibaseName","prefix","encodeCID","decode","cid","remainder","decodeFirst","length","bytes$1","specs","inspectBytes","prefixSize","size","multihashSize","multihashBytes","coerce","subarray","digestBytes","digestSize","Digest","multihashCode","initialBytes","offset","next","i","RangeError","parse","source","parseCIDtoBytes","set","decoder","cache","name","get","encode","slice","codeOffset","encodingLength","hashOffset","Uint8Array","encodeTo","writable","configurable","enumerable","range","message","test","console","warn"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/multiformats/cjs/src/cid.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint = require('./varint.js');\nvar digest = require('./hashes/digest.js');\nvar base58 = require('./bases/base58.js');\nvar base32 = require('./bases/base32.js');\nvar bytes = require('./bytes.js');\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest: digest$1} = this.multihash;\n        const multihash = digest.create(code, digest$1);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest$1 = digest.decode(multihash);\n      return CID.create(version, code, digest$1);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes$1) {\n    const specs = CID.inspectBytes(bytes$1);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n    return [\n      cid,\n      bytes$1.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(`${ base58.base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58.base58btc.prefix: {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.base32.prefix: {\n      const decoder = base || base32.base32;\n      return [\n        base32.base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\nexports.CID = CID;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIE,MAAM,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACzC,IAAIG,MAAM,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACzC,IAAII,KAAK,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAEjC,MAAMK,GAAG,CAAC;EACRC,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAEC,SAAS,EAAEL,KAAK,EAAE;IAC3C,IAAI,CAACI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACL,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACM,UAAU,GAAGN,KAAK,CAACM,UAAU;IAClC,IAAI,CAACC,UAAU,GAAGP,KAAK,CAACO,UAAU;IAClC,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC3BnB,MAAM,CAACoB,gBAAgB,CAAC,IAAI,EAAE;MAC5BL,UAAU,EAAEM,MAAM;MAClBL,UAAU,EAAEK,MAAM;MAClBR,IAAI,EAAES,QAAQ;MACdV,OAAO,EAAEU,QAAQ;MACjBR,SAAS,EAAEQ,QAAQ;MACnBb,KAAK,EAAEa,QAAQ;MACfJ,UAAU,EAAEG,MAAM;MAClBJ,KAAK,EAAEI;IACT,CAAC,CAAC;EACJ;EACAE,IAAIA,CAAA,EAAG;IACL,QAAQ,IAAI,CAACX,OAAO;MACpB,KAAK,CAAC;QAAE;UACJ,OAAO,IAAI;QACb;MACF;QAAS;UACL,MAAM;YAACC,IAAI;YAAEC;UAAS,CAAC,GAAG,IAAI;UAC9B,IAAID,IAAI,KAAKW,WAAW,EAAE;YACxB,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;UAC7D;UACA,IAAIX,SAAS,CAACD,IAAI,KAAKa,YAAY,EAAE;YACnC,MAAM,IAAID,KAAK,CAAC,oDAAoD,CAAC;UACvE;UACA,OAAOf,GAAG,CAACiB,QAAQ,CAACb,SAAS,CAAC;QAChC;IACF;EACF;EACAc,IAAIA,CAAA,EAAG;IACL,QAAQ,IAAI,CAAChB,OAAO;MACpB,KAAK,CAAC;QAAE;UACJ,MAAM;YAACC,IAAI;YAAEP,MAAM,EAAEuB;UAAQ,CAAC,GAAG,IAAI,CAACf,SAAS;UAC/C,MAAMA,SAAS,GAAGR,MAAM,CAACwB,MAAM,CAACjB,IAAI,EAAEgB,QAAQ,CAAC;UAC/C,OAAOnB,GAAG,CAACqB,QAAQ,CAAC,IAAI,CAAClB,IAAI,EAAEC,SAAS,CAAC;QAC3C;MACF,KAAK,CAAC;QAAE;UACJ,OAAO,IAAI;QACb;MACF;QAAS;UACL,MAAMW,KAAK,CAAC,+BAAgC,IAAI,CAACb,OAAO,4CAA6C,CAAC;QACxG;IACF;EACF;EACAoB,MAAMA,CAACC,KAAK,EAAE;IACZ,OAAOA,KAAK,IAAI,IAAI,CAACpB,IAAI,KAAKoB,KAAK,CAACpB,IAAI,IAAI,IAAI,CAACD,OAAO,KAAKqB,KAAK,CAACrB,OAAO,IAAIN,MAAM,CAAC0B,MAAM,CAAC,IAAI,CAAClB,SAAS,EAAEmB,KAAK,CAACnB,SAAS,CAAC;EAC9H;EACAoB,QAAQA,CAACC,IAAI,EAAE;IACb,MAAM;MAAC1B,KAAK;MAAEG,OAAO;MAAEM;IAAU,CAAC,GAAG,IAAI;IACzC,QAAQN,OAAO;MACf,KAAK,CAAC;QACJ,OAAOwB,UAAU,CAAC3B,KAAK,EAAES,UAAU,EAAEiB,IAAI,IAAI5B,MAAM,CAAC8B,SAAS,CAACC,OAAO,CAAC;MACxE;QACE,OAAOC,UAAU,CAAC9B,KAAK,EAAES,UAAU,EAAEiB,IAAI,IAAI3B,MAAM,CAACA,MAAM,CAAC8B,OAAO,CAAC;IACrE;EACF;EACAE,MAAMA,CAAA,EAAG;IACP,OAAO;MACL3B,IAAI,EAAE,IAAI,CAACA,IAAI;MACfD,OAAO,EAAE,IAAI,CAACA,OAAO;MACrB6B,IAAI,EAAE,IAAI,CAAC3B,SAAS,CAACL;IACvB,CAAC;EACH;EACA,KAAKiC,MAAM,CAACC,WAAW,IAAI;IACzB,OAAO,KAAK;EACd;EACA,CAACD,MAAM,CAACE,GAAG,CAAC,4BAA4B,CAAC,IAAI;IAC3C,OAAO,MAAM,GAAG,IAAI,CAACV,QAAQ,CAAC,CAAC,GAAG,GAAG;EACvC;EACA,OAAOW,KAAKA,CAAC1C,KAAK,EAAE;IAClB2C,SAAS,CAAC,OAAO,EAAEC,kBAAkB,CAAC;IACtC,OAAO,CAAC,EAAE5C,KAAK,KAAKA,KAAK,CAAC6C,SAAS,CAAC,IAAI7C,KAAK,CAACc,KAAK,KAAKd,KAAK,CAAC,CAAC;EACjE;EACA,IAAI8C,mBAAmBA,CAAA,EAAG;IACxB,MAAM,IAAIxB,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,IAAIyB,KAAKA,CAAA,EAAG;IACV,MAAM,IAAIzB,KAAK,CAAC,qEAAqE,CAAC;EACxF;EACA,IAAI0B,MAAMA,CAAA,EAAG;IACX,MAAM,IAAI1B,KAAK,CAAC,mEAAmE,CAAC;EACtF;EACA,IAAI2B,aAAaA,CAAA,EAAG;IAClB,MAAM,IAAI3B,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EACA,IAAI4B,MAAMA,CAAA,EAAG;IACX,MAAM,IAAI5B,KAAK,CAAC,iCAAiC,CAAC;EACpD;EACA,OAAOR,KAAKA,CAACd,KAAK,EAAE;IAClB,IAAIA,KAAK,YAAYO,GAAG,EAAE;MACxB,OAAOP,KAAK;IACd,CAAC,MAAM,IAAIA,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACc,KAAK,KAAKd,KAAK,EAAE;MACjD,MAAM;QAACS,OAAO;QAAEC,IAAI;QAAEC,SAAS;QAAEL;MAAK,CAAC,GAAGN,KAAK;MAC/C,OAAO,IAAIO,GAAG,CAACE,OAAO,EAAEC,IAAI,EAAEC,SAAS,EAAEL,KAAK,IAAI6C,SAAS,CAAC1C,OAAO,EAAEC,IAAI,EAAEC,SAAS,CAACL,KAAK,CAAC,CAAC;IAC9F,CAAC,MAAM,IAAIN,KAAK,IAAI,IAAI,IAAIA,KAAK,CAAC6C,SAAS,CAAC,KAAK,IAAI,EAAE;MACrD,MAAM;QAACpC,OAAO;QAAEE,SAAS;QAAED;MAAI,CAAC,GAAGV,KAAK;MACxC,MAAM0B,QAAQ,GAAGvB,MAAM,CAACiD,MAAM,CAACzC,SAAS,CAAC;MACzC,OAAOJ,GAAG,CAACoB,MAAM,CAAClB,OAAO,EAAEC,IAAI,EAAEgB,QAAQ,CAAC;IAC5C,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;EACA,OAAOC,MAAMA,CAAClB,OAAO,EAAEC,IAAI,EAAEP,MAAM,EAAE;IACnC,IAAI,OAAOO,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,IAAIY,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IACA,QAAQb,OAAO;MACf,KAAK,CAAC;QAAE;UACJ,IAAIC,IAAI,KAAKW,WAAW,EAAE;YACxB,MAAM,IAAIC,KAAK,CAAC,wCAAyCD,WAAW,kBAAmB,CAAC;UAC1F,CAAC,MAAM;YACL,OAAO,IAAId,GAAG,CAACE,OAAO,EAAEC,IAAI,EAAEP,MAAM,EAAEA,MAAM,CAACG,KAAK,CAAC;UACrD;QACF;MACF,KAAK,CAAC;QAAE;UACJ,MAAMA,KAAK,GAAG6C,SAAS,CAAC1C,OAAO,EAAEC,IAAI,EAAEP,MAAM,CAACG,KAAK,CAAC;UACpD,OAAO,IAAIC,GAAG,CAACE,OAAO,EAAEC,IAAI,EAAEP,MAAM,EAAEG,KAAK,CAAC;QAC9C;MACF;QAAS;UACL,MAAM,IAAIgB,KAAK,CAAC,iBAAiB,CAAC;QACpC;IACF;EACF;EACA,OAAOE,QAAQA,CAACrB,MAAM,EAAE;IACtB,OAAOI,GAAG,CAACoB,MAAM,CAAC,CAAC,EAAEN,WAAW,EAAElB,MAAM,CAAC;EAC3C;EACA,OAAOyB,QAAQA,CAAClB,IAAI,EAAEP,MAAM,EAAE;IAC5B,OAAOI,GAAG,CAACoB,MAAM,CAAC,CAAC,EAAEjB,IAAI,EAAEP,MAAM,CAAC;EACpC;EACA,OAAOiD,MAAMA,CAAC9C,KAAK,EAAE;IACnB,MAAM,CAAC+C,GAAG,EAAEC,SAAS,CAAC,GAAG/C,GAAG,CAACgD,WAAW,CAACjD,KAAK,CAAC;IAC/C,IAAIgD,SAAS,CAACE,MAAM,EAAE;MACpB,MAAM,IAAIlC,KAAK,CAAC,kBAAkB,CAAC;IACrC;IACA,OAAO+B,GAAG;EACZ;EACA,OAAOE,WAAWA,CAACE,OAAO,EAAE;IAC1B,MAAMC,KAAK,GAAGnD,GAAG,CAACoD,YAAY,CAACF,OAAO,CAAC;IACvC,MAAMG,UAAU,GAAGF,KAAK,CAACG,IAAI,GAAGH,KAAK,CAACI,aAAa;IACnD,MAAMC,cAAc,GAAGzD,KAAK,CAAC0D,MAAM,CAACP,OAAO,CAACQ,QAAQ,CAACL,UAAU,EAAEA,UAAU,GAAGF,KAAK,CAACI,aAAa,CAAC,CAAC;IACnG,IAAIC,cAAc,CAAClD,UAAU,KAAK6C,KAAK,CAACI,aAAa,EAAE;MACrD,MAAM,IAAIxC,KAAK,CAAC,kBAAkB,CAAC;IACrC;IACA,MAAM4C,WAAW,GAAGH,cAAc,CAACE,QAAQ,CAACP,KAAK,CAACI,aAAa,GAAGJ,KAAK,CAACS,UAAU,CAAC;IACnF,MAAMzC,QAAQ,GAAG,IAAIvB,MAAM,CAACiE,MAAM,CAACV,KAAK,CAACW,aAAa,EAAEX,KAAK,CAACS,UAAU,EAAED,WAAW,EAAEH,cAAc,CAAC;IACtG,MAAMV,GAAG,GAAGK,KAAK,CAACjD,OAAO,KAAK,CAAC,GAAGF,GAAG,CAACiB,QAAQ,CAACE,QAAQ,CAAC,GAAGnB,GAAG,CAACqB,QAAQ,CAAC8B,KAAK,CAACX,KAAK,EAAErB,QAAQ,CAAC;IAC9F,OAAO,CACL2B,GAAG,EACHI,OAAO,CAACQ,QAAQ,CAACP,KAAK,CAACG,IAAI,CAAC,CAC7B;EACH;EACA,OAAOF,YAAYA,CAACW,YAAY,EAAE;IAChC,IAAIC,MAAM,GAAG,CAAC;IACd,MAAMC,IAAI,GAAGA,CAAA,KAAM;MACjB,MAAM,CAACC,CAAC,EAAEjB,MAAM,CAAC,GAAGvD,MAAM,CAACmD,MAAM,CAACkB,YAAY,CAACL,QAAQ,CAACM,MAAM,CAAC,CAAC;MAChEA,MAAM,IAAIf,MAAM;MAChB,OAAOiB,CAAC;IACV,CAAC;IACD,IAAIhE,OAAO,GAAG+D,IAAI,CAAC,CAAC;IACpB,IAAIzB,KAAK,GAAG1B,WAAW;IACvB,IAAIZ,OAAO,KAAK,EAAE,EAAE;MAClBA,OAAO,GAAG,CAAC;MACX8D,MAAM,GAAG,CAAC;IACZ,CAAC,MAAM,IAAI9D,OAAO,KAAK,CAAC,EAAE;MACxBsC,KAAK,GAAGyB,IAAI,CAAC,CAAC;IAChB;IACA,IAAI/D,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAK,CAAC,EAAE;MAClC,MAAM,IAAIiE,UAAU,CAAC,uBAAwBjE,OAAO,EAAG,CAAC;IAC1D;IACA,MAAMmD,UAAU,GAAGW,MAAM;IACzB,MAAMF,aAAa,GAAGG,IAAI,CAAC,CAAC;IAC5B,MAAML,UAAU,GAAGK,IAAI,CAAC,CAAC;IACzB,MAAMX,IAAI,GAAGU,MAAM,GAAGJ,UAAU;IAChC,MAAML,aAAa,GAAGD,IAAI,GAAGD,UAAU;IACvC,OAAO;MACLnD,OAAO;MACPsC,KAAK;MACLsB,aAAa;MACbF,UAAU;MACVL,aAAa;MACbD;IACF,CAAC;EACH;EACA,OAAOc,KAAKA,CAACC,MAAM,EAAE5C,IAAI,EAAE;IACzB,MAAM,CAACkB,MAAM,EAAE5C,KAAK,CAAC,GAAGuE,eAAe,CAACD,MAAM,EAAE5C,IAAI,CAAC;IACrD,MAAMqB,GAAG,GAAG9C,GAAG,CAAC6C,MAAM,CAAC9C,KAAK,CAAC;IAC7B+C,GAAG,CAACtC,UAAU,CAAC+D,GAAG,CAAC5B,MAAM,EAAE0B,MAAM,CAAC;IAClC,OAAOvB,GAAG;EACZ;AACF;AACA,MAAMwB,eAAe,GAAGA,CAACD,MAAM,EAAE5C,IAAI,KAAK;EACxC,QAAQ4C,MAAM,CAAC,CAAC,CAAC;IACjB,KAAK,GAAG;MAAE;QACN,MAAMG,OAAO,GAAG/C,IAAI,IAAI5B,MAAM,CAAC8B,SAAS;QACxC,OAAO,CACL9B,MAAM,CAAC8B,SAAS,CAACgB,MAAM,EACvB6B,OAAO,CAAC3B,MAAM,CAAC,GAAIhD,MAAM,CAAC8B,SAAS,CAACgB,MAAM,GAAK0B,MAAM,EAAG,CAAC,CAC1D;MACH;IACF,KAAKxE,MAAM,CAAC8B,SAAS,CAACgB,MAAM;MAAE;QAC1B,MAAM6B,OAAO,GAAG/C,IAAI,IAAI5B,MAAM,CAAC8B,SAAS;QACxC,OAAO,CACL9B,MAAM,CAAC8B,SAAS,CAACgB,MAAM,EACvB6B,OAAO,CAAC3B,MAAM,CAACwB,MAAM,CAAC,CACvB;MACH;IACF,KAAKvE,MAAM,CAACA,MAAM,CAAC6C,MAAM;MAAE;QACvB,MAAM6B,OAAO,GAAG/C,IAAI,IAAI3B,MAAM,CAACA,MAAM;QACrC,OAAO,CACLA,MAAM,CAACA,MAAM,CAAC6C,MAAM,EACpB6B,OAAO,CAAC3B,MAAM,CAACwB,MAAM,CAAC,CACvB;MACH;IACF;MAAS;QACL,IAAI5C,IAAI,IAAI,IAAI,EAAE;UAChB,MAAMV,KAAK,CAAC,iFAAiF,CAAC;QAChG;QACA,OAAO,CACLsD,MAAM,CAAC,CAAC,CAAC,EACT5C,IAAI,CAACoB,MAAM,CAACwB,MAAM,CAAC,CACpB;MACH;EACF;AACF,CAAC;AACD,MAAM3C,UAAU,GAAGA,CAAC3B,KAAK,EAAE0E,KAAK,EAAEhD,IAAI,KAAK;EACzC,MAAM;IAACkB;EAAM,CAAC,GAAGlB,IAAI;EACrB,IAAIkB,MAAM,KAAK9C,MAAM,CAAC8B,SAAS,CAACgB,MAAM,EAAE;IACtC,MAAM5B,KAAK,CAAC,8BAA+BU,IAAI,CAACiD,IAAI,WAAY,CAAC;EACnE;EACA,MAAM5B,GAAG,GAAG2B,KAAK,CAACE,GAAG,CAAChC,MAAM,CAAC;EAC7B,IAAIG,GAAG,IAAI,IAAI,EAAE;IACf,MAAMA,GAAG,GAAGrB,IAAI,CAACmD,MAAM,CAAC7E,KAAK,CAAC,CAAC8E,KAAK,CAAC,CAAC,CAAC;IACvCJ,KAAK,CAACF,GAAG,CAAC5B,MAAM,EAAEG,GAAG,CAAC;IACtB,OAAOA,GAAG;EACZ,CAAC,MAAM;IACL,OAAOA,GAAG;EACZ;AACF,CAAC;AACD,MAAMjB,UAAU,GAAGA,CAAC9B,KAAK,EAAE0E,KAAK,EAAEhD,IAAI,KAAK;EACzC,MAAM;IAACkB;EAAM,CAAC,GAAGlB,IAAI;EACrB,MAAMqB,GAAG,GAAG2B,KAAK,CAACE,GAAG,CAAChC,MAAM,CAAC;EAC7B,IAAIG,GAAG,IAAI,IAAI,EAAE;IACf,MAAMA,GAAG,GAAGrB,IAAI,CAACmD,MAAM,CAAC7E,KAAK,CAAC;IAC9B0E,KAAK,CAACF,GAAG,CAAC5B,MAAM,EAAEG,GAAG,CAAC;IACtB,OAAOA,GAAG;EACZ,CAAC,MAAM;IACL,OAAOA,GAAG;EACZ;AACF,CAAC;AACD,MAAMhC,WAAW,GAAG,GAAG;AACvB,MAAME,YAAY,GAAG,EAAE;AACvB,MAAM4B,SAAS,GAAGA,CAAC1C,OAAO,EAAEC,IAAI,EAAEC,SAAS,KAAK;EAC9C,MAAM0E,UAAU,GAAGpF,MAAM,CAACqF,cAAc,CAAC7E,OAAO,CAAC;EACjD,MAAM8E,UAAU,GAAGF,UAAU,GAAGpF,MAAM,CAACqF,cAAc,CAAC5E,IAAI,CAAC;EAC3D,MAAMJ,KAAK,GAAG,IAAIkF,UAAU,CAACD,UAAU,GAAG5E,SAAS,CAACE,UAAU,CAAC;EAC/DZ,MAAM,CAACwF,QAAQ,CAAChF,OAAO,EAAEH,KAAK,EAAE,CAAC,CAAC;EAClCL,MAAM,CAACwF,QAAQ,CAAC/E,IAAI,EAAEJ,KAAK,EAAE+E,UAAU,CAAC;EACxC/E,KAAK,CAACwE,GAAG,CAACnE,SAAS,EAAE4E,UAAU,CAAC;EAChC,OAAOjF,KAAK;AACd,CAAC;AACD,MAAMuC,SAAS,GAAGN,MAAM,CAACE,GAAG,CAAC,kBAAkB,CAAC;AAChD,MAAMtB,QAAQ,GAAG;EACfuE,QAAQ,EAAE,KAAK;EACfC,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE;AACd,CAAC;AACD,MAAM1E,MAAM,GAAG;EACbwE,QAAQ,EAAE,KAAK;EACfE,UAAU,EAAE,KAAK;EACjBD,YAAY,EAAE;AAChB,CAAC;AACD,MAAMlF,OAAO,GAAG,WAAW;AAC3B,MAAMkC,SAAS,GAAGA,CAACkD,KAAK,EAAEC,OAAO,KAAK;EACpC,IAAID,KAAK,CAACE,IAAI,CAACtF,OAAO,CAAC,EAAE;IACvBuF,OAAO,CAACC,IAAI,CAACH,OAAO,CAAC;EACvB,CAAC,MAAM;IACL,MAAM,IAAIxE,KAAK,CAACwE,OAAO,CAAC;EAC1B;AACF,CAAC;AACD,MAAMlD,kBAAkB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED7C,OAAO,CAACQ,GAAG,GAAGA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script"}