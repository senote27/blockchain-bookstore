{"ast":null,"code":"'use strict';\n\nvar basics = require('multiformats/basics');\nvar alloc = require('../alloc.js');\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = alloc.allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: basics.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...basics.bases\n};\nmodule.exports = BASES;","map":{"version":3,"names":["basics","require","alloc","createCodec","name","prefix","encode","decode","encoder","decoder","string","buf","TextDecoder","str","TextEncoder","substring","ascii","i","length","String","fromCharCode","allocUnsafe","charCodeAt","BASES","utf8","hex","bases","base16","latin1","binary","module","exports"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/uint8arrays/cjs/src/util/bases.js"],"sourcesContent":["'use strict';\n\nvar basics = require('multiformats/basics');\nvar alloc = require('../alloc.js');\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = alloc.allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: basics.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...basics.bases\n};\n\nmodule.exports = BASES;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC3C,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAa,CAAC;AAElC,SAASE,WAAWA,CAACC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;EACjD,OAAO;IACLH,IAAI;IACJC,MAAM;IACNG,OAAO,EAAE;MACPJ,IAAI;MACJC,MAAM;MACNC;IACF,CAAC;IACDG,OAAO,EAAE;MAAEF;IAAO;EACpB,CAAC;AACH;AACA,MAAMG,MAAM,GAAGP,WAAW,CAAC,MAAM,EAAE,GAAG,EAAEQ,GAAG,IAAI;EAC7C,MAAMF,OAAO,GAAG,IAAIG,WAAW,CAAC,MAAM,CAAC;EACvC,OAAO,GAAG,GAAGH,OAAO,CAACF,MAAM,CAACI,GAAG,CAAC;AAClC,CAAC,EAAEE,GAAG,IAAI;EACR,MAAML,OAAO,GAAG,IAAIM,WAAW,CAAC,CAAC;EACjC,OAAON,OAAO,CAACF,MAAM,CAACO,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC;AACF,MAAMC,KAAK,GAAGb,WAAW,CAAC,OAAO,EAAE,GAAG,EAAEQ,GAAG,IAAI;EAC7C,IAAID,MAAM,GAAG,GAAG;EAChB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACnCP,MAAM,IAAIS,MAAM,CAACC,YAAY,CAACT,GAAG,CAACM,CAAC,CAAC,CAAC;EACvC;EACA,OAAOP,MAAM;AACf,CAAC,EAAEG,GAAG,IAAI;EACRA,GAAG,GAAGA,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC;EACtB,MAAMJ,GAAG,GAAGT,KAAK,CAACmB,WAAW,CAACR,GAAG,CAACK,MAAM,CAAC;EACzC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACnCN,GAAG,CAACM,CAAC,CAAC,GAAGJ,GAAG,CAACS,UAAU,CAACL,CAAC,CAAC;EAC5B;EACA,OAAON,GAAG;AACZ,CAAC,CAAC;AACF,MAAMY,KAAK,GAAG;EACZC,IAAI,EAAEd,MAAM;EACZ,OAAO,EAAEA,MAAM;EACfe,GAAG,EAAEzB,MAAM,CAAC0B,KAAK,CAACC,MAAM;EACxBC,MAAM,EAAEZ,KAAK;EACbA,KAAK,EAAEA,KAAK;EACZa,MAAM,EAAEb,KAAK;EACb,GAAGhB,MAAM,CAAC0B;AACZ,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGR,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script"}