{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar multiformats = require('multiformats');\nvar base64 = require('multiformats/bases/base64');\nvar cborg = require('cborg');\nvar cborgJson = require('cborg/json');\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar cborgJson__namespace = /*#__PURE__*/_interopNamespace(cborgJson);\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = multiformats.CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const cidString = cid.toString();\n  return [new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, '/', 1), new cborg.Token(cborg.Type.string, cidString, cidString.length), new cborg.Token(cborg.Type.break, undefined, 1)];\n}\nfunction bytesEncoder(bytes) {\n  const bytesString = base64.base64.encode(bytes).slice(1);\n  return [new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, '/', 1), new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, 'bytes', 5), new cborg.Token(cborg.Type.string, bytesString, bytesString.length), new cborg.Token(cborg.Type.break, undefined, 1), new cborg.Token(cborg.Type.break, undefined, 1)];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nclass DagJsonTokenizer extends cborgJson__namespace.Tokenizer {\n  constructor(data, options) {\n    super(data, options);\n    this.tokenBuffer = [];\n  }\n  done() {\n    return this.tokenBuffer.length === 0 && super.done();\n  }\n  _next() {\n    if (this.tokenBuffer.length > 0) {\n      return this.tokenBuffer.pop();\n    }\n    return super.next();\n  }\n  next() {\n    const token = this._next();\n    if (token.type === cborg.Type.map) {\n      const keyToken = this._next();\n      if (keyToken.type === cborg.Type.string && keyToken.value === '/') {\n        const valueToken = this._next();\n        if (valueToken.type === cborg.Type.string) {\n          const breakToken = this._next();\n          if (breakToken.type !== cborg.Type.break) {\n            throw new Error('Invalid encoded CID form');\n          }\n          this.tokenBuffer.push(valueToken);\n          return new cborg.Token(cborg.Type.tag, 42, 0);\n        }\n        if (valueToken.type === cborg.Type.map) {\n          const innerKeyToken = this._next();\n          if (innerKeyToken.type === cborg.Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next();\n            if (innerValueToken.type === cborg.Type.string) {\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next();\n                if (breakToken.type !== cborg.Type.break) {\n                  throw new Error('Invalid encoded Bytes form');\n                }\n              }\n              const bytes = base64.base64.decode(`m${innerValueToken.value}`);\n              return new cborg.Token(cborg.Type.bytes, bytes, innerValueToken.value.length);\n            }\n            this.tokenBuffer.push(innerValueToken);\n          }\n          this.tokenBuffer.push(innerKeyToken);\n        }\n        this.tokenBuffer.push(valueToken);\n      }\n      this.tokenBuffer.push(keyToken);\n    }\n    return token;\n  }\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = multiformats.CID.parse;\nconst name = 'dag-json';\nconst code = 297;\nconst encode = node => cborgJson__namespace.encode(node, encodeOptions);\nconst decode = data => {\n  const options = Object.assign(decodeOptions, {\n    tokenizer: new DagJsonTokenizer(data, decodeOptions)\n  });\n  return cborgJson__namespace.decode(data, options);\n};\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;","map":{"version":3,"names":["Object","defineProperty","exports","value","multiformats","require","base64","cborg","cborgJson","_interopNamespace","e","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","cborgJson__namespace","cidEncoder","obj","asCID","cid","CID","cidString","toString","Token","Type","map","Infinity","string","length","break","undefined","bytesEncoder","bytes","bytesString","encode","slice","undefinedEncoder","Error","numberEncoder","num","Number","isNaN","encodeOptions","typeEncoders","Uint8Array","Buffer","number","DagJsonTokenizer","Tokenizer","constructor","data","options","tokenBuffer","done","_next","pop","next","token","type","keyToken","valueToken","breakToken","push","tag","innerKeyToken","innerValueToken","i","decode","decodeOptions","allowIndefinite","allowUndefined","allowNaN","allowInfinity","allowBigInt","strict","useMaps","tags","parse","name","code","node","assign","tokenizer"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/@ipld/dag-json/cjs/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiformats = require('multiformats');\nvar base64 = require('multiformats/bases/base64');\nvar cborg = require('cborg');\nvar cborgJson = require('cborg/json');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar cborgJson__namespace = /*#__PURE__*/_interopNamespace(cborgJson);\n\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = multiformats.CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const cidString = cid.toString();\n  return [\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, '/', 1),\n    new cborg.Token(cborg.Type.string, cidString, cidString.length),\n    new cborg.Token(cborg.Type.break, undefined, 1)\n  ];\n}\nfunction bytesEncoder(bytes) {\n  const bytesString = base64.base64.encode(bytes).slice(1);\n  return [\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, '/', 1),\n    new cborg.Token(cborg.Type.map, Infinity, 1),\n    new cborg.Token(cborg.Type.string, 'bytes', 5),\n    new cborg.Token(cborg.Type.string, bytesString, bytesString.length),\n    new cborg.Token(cborg.Type.break, undefined, 1),\n    new cborg.Token(cborg.Type.break, undefined, 1)\n  ];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nclass DagJsonTokenizer extends cborgJson__namespace.Tokenizer {\n  constructor(data, options) {\n    super(data, options);\n    this.tokenBuffer = [];\n  }\n  done() {\n    return this.tokenBuffer.length === 0 && super.done();\n  }\n  _next() {\n    if (this.tokenBuffer.length > 0) {\n      return this.tokenBuffer.pop();\n    }\n    return super.next();\n  }\n  next() {\n    const token = this._next();\n    if (token.type === cborg.Type.map) {\n      const keyToken = this._next();\n      if (keyToken.type === cborg.Type.string && keyToken.value === '/') {\n        const valueToken = this._next();\n        if (valueToken.type === cborg.Type.string) {\n          const breakToken = this._next();\n          if (breakToken.type !== cborg.Type.break) {\n            throw new Error('Invalid encoded CID form');\n          }\n          this.tokenBuffer.push(valueToken);\n          return new cborg.Token(cborg.Type.tag, 42, 0);\n        }\n        if (valueToken.type === cborg.Type.map) {\n          const innerKeyToken = this._next();\n          if (innerKeyToken.type === cborg.Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next();\n            if (innerValueToken.type === cborg.Type.string) {\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next();\n                if (breakToken.type !== cborg.Type.break) {\n                  throw new Error('Invalid encoded Bytes form');\n                }\n              }\n              const bytes = base64.base64.decode(`m${ innerValueToken.value }`);\n              return new cborg.Token(cborg.Type.bytes, bytes, innerValueToken.value.length);\n            }\n            this.tokenBuffer.push(innerValueToken);\n          }\n          this.tokenBuffer.push(innerKeyToken);\n        }\n        this.tokenBuffer.push(valueToken);\n      }\n      this.tokenBuffer.push(keyToken);\n    }\n    return token;\n  }\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = multiformats.CID.parse;\nconst name = 'dag-json';\nconst code = 297;\nconst encode = node => cborgJson__namespace.encode(node, encodeOptions);\nconst decode = data => {\n  const options = Object.assign(decodeOptions, { tokenizer: new DagJsonTokenizer(data, decodeOptions) });\n  return cborgJson__namespace.decode(data, options);\n};\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}