{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar cid = require('multiformats/cid');\nconst pbNodeProperties = ['Data', 'Links'];\nconst pbLinkProperties = ['Hash', 'Name', 'Tsize'];\nconst textEncoder = new TextEncoder();\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n  return x < y ? -1 : y < x ? 1 : 0;\n}\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = cid.CID.asCID(link);\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n    return {\n      Hash\n    };\n  }\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbl = {};\n  if (link.Hash) {\n    let cid$1 = cid.CID.asCID(link.Hash);\n    try {\n      if (!cid$1) {\n        if (typeof link.Hash === 'string') {\n          cid$1 = cid.CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid$1 = cid.CID.decode(link.Hash);\n        }\n      }\n    } catch (e) {\n      throw new TypeError(`Invalid DAG-PB form: ${e.message}`);\n    }\n    if (cid$1) {\n      pbl.Hash = cid$1;\n    }\n  }\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n  return pbl;\n}\nfunction prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = {\n      Data: node\n    };\n  }\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbn = {};\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n  return pbn;\n}\nfunction validate(node) {\n  if (!node || typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');\n  }\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be an array)');\n  }\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i];\n    if (!link || typeof link !== 'object' || Array.isArray(link)) {\n      throw new TypeError('Invalid DAG-PB form (bad link object)');\n    }\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');\n    }\n    if (!link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    }\n    if (link.Hash.asCID !== link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {\n      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n    }\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\nfunction createNode(data, links = []) {\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\nfunction createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}\nexports.createLink = createLink;\nexports.createNode = createNode;\nexports.prepare = prepare;\nexports.validate = validate;","map":{"version":3,"names":["Object","defineProperty","exports","value","cid","require","pbNodeProperties","pbLinkProperties","textEncoder","TextEncoder","linkComparator","a","b","abuf","Name","encode","bbuf","x","length","y","i","len","Math","min","hasOnlyProperties","node","properties","keys","some","p","includes","asLink","link","asCID","Hash","CID","TypeError","Array","isArray","pbl","cid$1","parse","Uint8Array","decode","e","message","Tsize","prepare","Data","pbn","undefined","Links","map","sort","validate","createNode","data","links","createLink","name","size"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/@ipld/dag-pb/cjs/src/util.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\n\nconst pbNodeProperties = [\n  'Data',\n  'Links'\n];\nconst pbLinkProperties = [\n  'Hash',\n  'Name',\n  'Tsize'\n];\nconst textEncoder = new TextEncoder();\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n  return x < y ? -1 : y < x ? 1 : 0;\n}\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = cid.CID.asCID(link);\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n    return { Hash };\n  }\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbl = {};\n  if (link.Hash) {\n    let cid$1 = cid.CID.asCID(link.Hash);\n    try {\n      if (!cid$1) {\n        if (typeof link.Hash === 'string') {\n          cid$1 = cid.CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid$1 = cid.CID.decode(link.Hash);\n        }\n      }\n    } catch (e) {\n      throw new TypeError(`Invalid DAG-PB form: ${ e.message }`);\n    }\n    if (cid$1) {\n      pbl.Hash = cid$1;\n    }\n  }\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n  return pbl;\n}\nfunction prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = { Data: node };\n  }\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbn = {};\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n  return pbn;\n}\nfunction validate(node) {\n  if (!node || typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');\n  }\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be an array)');\n  }\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i];\n    if (!link || typeof link !== 'object' || Array.isArray(link)) {\n      throw new TypeError('Invalid DAG-PB form (bad link object)');\n    }\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');\n    }\n    if (!link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    }\n    if (link.Hash.asCID !== link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {\n      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n    }\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\nfunction createNode(data, links = []) {\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\nfunction createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}\n\nexports.createLink = createLink;\nexports.createNode = createNode;\nexports.prepare = prepare;\nexports.validate = validate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}