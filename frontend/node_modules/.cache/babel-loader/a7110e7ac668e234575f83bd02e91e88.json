{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar fromString = require('uint8arrays/from-string');\nvar responseTypes = require('./response-types.js');\nvar multiaddr = require('multiaddr');\nconst mapEvent = event => {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === responseTypes.AddingPeer) {\n    const peers = event.Responses.map(({\n      ID\n    }) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};\nexports.mapEvent = mapEvent;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromString","require","responseTypes","multiaddr","mapEvent","event","Type","SendingQuery","to","ID","name","type","PeerResponse","from","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","Multiaddr","providers","FinalPeer","peer","length","QueryError","error","Error","Extra","Provider","Value","AddingPeer","peers","DialingPeer"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/ipfs-http-client/cjs/src/dht/map-event.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar fromString = require('uint8arrays/from-string');\nvar responseTypes = require('./response-types.js');\nvar multiaddr = require('multiaddr');\n\nconst mapEvent = event => {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === responseTypes.AddingPeer) {\n    const peers = event.Responses.map(({ID}) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};\n\nexports.mapEvent = mapEvent;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACnD,IAAIC,aAAa,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAClD,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AAEpC,MAAMG,QAAQ,GAAGC,KAAK,IAAI;EACxB,IAAIA,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAACK,YAAY,EAAE;IAC7C,OAAO;MACLC,EAAE,EAAEH,KAAK,CAACI,EAAE;MACZC,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAEN,KAAK,CAACC;IACd,CAAC;EACH;EACA,IAAID,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAACU,YAAY,EAAE;IAC7C,OAAO;MACLC,IAAI,EAAER,KAAK,CAACI,EAAE;MACdC,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAEN,KAAK,CAACC,IAAI;MAChBQ,WAAW,EAAE,CAAC;MACdC,WAAW,EAAE,WAAW;MACxBC,MAAM,EAAE,CAACX,KAAK,CAACY,SAAS,IAAI,EAAE,EAAEC,GAAG,CAAC,CAAC;QAACT,EAAE;QAAEU;MAAK,CAAC,MAAM;QACpDC,EAAE,EAAEX,EAAE;QACNY,UAAU,EAAEF,KAAK,CAACD,GAAG,CAACI,IAAI,IAAI,IAAInB,SAAS,CAACoB,SAAS,CAACD,IAAI,CAAC;MAC7D,CAAC,CAAC,CAAC;MACHE,SAAS,EAAE,CAACnB,KAAK,CAACY,SAAS,IAAI,EAAE,EAAEC,GAAG,CAAC,CAAC;QAACT,EAAE;QAAEU;MAAK,CAAC,MAAM;QACvDC,EAAE,EAAEX,EAAE;QACNY,UAAU,EAAEF,KAAK,CAACD,GAAG,CAACI,IAAI,IAAI,IAAInB,SAAS,CAACoB,SAAS,CAACD,IAAI,CAAC;MAC7D,CAAC,CAAC;IACJ,CAAC;EACH;EACA,IAAIjB,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAACuB,SAAS,EAAE;IAC1C,IAAIC,IAAI,GAAG;MACTN,EAAE,EAAEf,KAAK,CAACI,EAAE;MACZY,UAAU,EAAE;IACd,CAAC;IACD,IAAIhB,KAAK,CAACY,SAAS,IAAIZ,KAAK,CAACY,SAAS,CAACU,MAAM,EAAE;MAC7CD,IAAI,GAAG;QACLN,EAAE,EAAEf,KAAK,CAACY,SAAS,CAAC,CAAC,CAAC,CAACR,EAAE;QACzBY,UAAU,EAAEhB,KAAK,CAACY,SAAS,CAAC,CAAC,CAAC,CAACE,KAAK,CAACD,GAAG,CAACI,IAAI,IAAI,IAAInB,SAAS,CAACoB,SAAS,CAACD,IAAI,CAAC;MAChF,CAAC;IACH;IACA,OAAO;MACLT,IAAI,EAAER,KAAK,CAACI,EAAE;MACdC,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAEN,KAAK,CAACC,IAAI;MAChBoB;IACF,CAAC;EACH;EACA,IAAIrB,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAAC0B,UAAU,EAAE;IAC3C,OAAO;MACLf,IAAI,EAAER,KAAK,CAACI,EAAE;MACdC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAEN,KAAK,CAACC,IAAI;MAChBuB,KAAK,EAAE,IAAIC,KAAK,CAACzB,KAAK,CAAC0B,KAAK;IAC9B,CAAC;EACH;EACA,IAAI1B,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAAC8B,QAAQ,EAAE;IACzC,OAAO;MACLnB,IAAI,EAAER,KAAK,CAACI,EAAE;MACdC,IAAI,EAAE,UAAU;MAChBC,IAAI,EAAEN,KAAK,CAACC,IAAI;MAChBkB,SAAS,EAAEnB,KAAK,CAACY,SAAS,CAACC,GAAG,CAAC,CAAC;QAACT,EAAE;QAAEU;MAAK,CAAC,MAAM;QAC/CC,EAAE,EAAEX,EAAE;QACNY,UAAU,EAAEF,KAAK,CAACD,GAAG,CAACI,IAAI,IAAI,IAAInB,SAAS,CAACoB,SAAS,CAACD,IAAI,CAAC;MAC7D,CAAC,CAAC;IACJ,CAAC;EACH;EACA,IAAIjB,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAAC+B,KAAK,EAAE;IACtC,OAAO;MACLpB,IAAI,EAAER,KAAK,CAACI,EAAE;MACdC,IAAI,EAAE,OAAO;MACbC,IAAI,EAAEN,KAAK,CAACC,IAAI;MAChBP,KAAK,EAAEC,UAAU,CAACA,UAAU,CAACK,KAAK,CAAC0B,KAAK,EAAE,WAAW;IACvD,CAAC;EACH;EACA,IAAI1B,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAACgC,UAAU,EAAE;IAC3C,MAAMC,KAAK,GAAG9B,KAAK,CAACY,SAAS,CAACC,GAAG,CAAC,CAAC;MAACT;IAAE,CAAC,KAAKA,EAAE,CAAC;IAC/C,IAAI,CAAC0B,KAAK,CAACR,MAAM,EAAE;MACjB,MAAM,IAAIG,KAAK,CAAC,eAAe,CAAC;IAClC;IACA,OAAO;MACLpB,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAEN,KAAK,CAACC,IAAI;MAChBoB,IAAI,EAAES,KAAK,CAAC,CAAC;IACf,CAAC;EACH;EACA,IAAI9B,KAAK,CAACC,IAAI,KAAKJ,aAAa,CAACkC,WAAW,EAAE;IAC5C,OAAO;MACL1B,IAAI,EAAE,cAAc;MACpBC,IAAI,EAAEN,KAAK,CAACC,IAAI;MAChBoB,IAAI,EAAErB,KAAK,CAACI;IACd,CAAC;EACH;EACA,MAAM,IAAIqB,KAAK,CAAC,wBAAwB,CAAC;AAC3C,CAAC;AAEDhC,OAAO,CAACM,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}