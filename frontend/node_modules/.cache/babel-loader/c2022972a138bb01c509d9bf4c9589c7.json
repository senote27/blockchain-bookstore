{"ast":null,"code":"import Web3 from 'web3';\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  if (window.ethereum) {\n    const web3 = new Web3(window.ethereum);\n    try {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(() => resolve(web3)).catch(err => reject(err));\n    } catch (error) {\n      reject(error);\n    }\n  } else {\n    reject(new Error('MetaMask not found'));\n  }\n});\nexport default getWeb3;","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","ethereum","web3","request","method","then","catch","err","error","Error"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/src/utils/getWeb3.js"],"sourcesContent":["import Web3 from 'web3';\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    if (window.ethereum) {\r\n      const web3 = new Web3(window.ethereum);\r\n      try {\r\n        window.ethereum\r\n          .request({ method: 'eth_requestAccounts' })\r\n          .then(() => resolve(web3))\r\n          .catch((err) => reject(err));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    } else {\r\n      reject(new Error('MetaMask not found'));\r\n    }\r\n  });\r\n\r\nexport default getWeb3;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KACd,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACnB,MAAMC,IAAI,GAAG,IAAIP,IAAI,CAACK,MAAM,CAACC,QAAQ,CAAC;IACtC,IAAI;MACFD,MAAM,CAACC,QAAQ,CACZE,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC,CAC1CC,IAAI,CAAC,MAAMP,OAAO,CAACI,IAAI,CAAC,CAAC,CACzBI,KAAK,CAAEC,GAAG,IAAKR,MAAM,CAACQ,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdT,MAAM,CAACS,KAAK,CAAC;IACf;EACF,CAAC,MAAM;IACLT,MAAM,CAAC,IAAIU,KAAK,CAAC,oBAAoB,CAAC,CAAC;EACzC;AACF,CAAC,CAAC;AAEJ,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}