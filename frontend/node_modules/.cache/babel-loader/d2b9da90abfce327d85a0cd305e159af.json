{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar cid = require('multiformats/cid');\nvar toUrlSearchParams = require('../../lib/to-url-search-params.js');\nconst decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid$1\n}) => {\n  return {\n    cid: cid.CID.parse(cid$1),\n    name,\n    status\n  };\n};\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nconst encodeCID = cid$1 => {\n  if (cid.CID.asCID(cid$1)) {\n    return cid$1.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid$1}`);\n  }\n};\nconst encodeQuery = ({\n  service,\n  cid,\n  name,\n  status,\n  all\n}) => {\n  const query = toUrlSearchParams.toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\nconst encodeAddParams = ({\n  cid,\n  service,\n  background,\n  name,\n  origins\n}) => {\n  const params = toUrlSearchParams.toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};\nexports.decodePin = decodePin;\nexports.encodeAddParams = encodeAddParams;\nexports.encodeCID = encodeCID;\nexports.encodeQuery = encodeQuery;\nexports.encodeService = encodeService;","map":{"version":3,"names":["Object","defineProperty","exports","value","cid","require","toUrlSearchParams","decodePin","Name","name","Status","status","Cid","cid$1","CID","parse","encodeService","service","TypeError","encodeCID","asCID","toString","encodeQuery","all","query","force","undefined","append","encodeAddParams","background","origins","params","arg","origin"],"sources":["C:/Users/Administrator/Downloads/blockchain-bookstore/frontend/node_modules/ipfs-http-client/cjs/src/pin/remote/utils.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar toUrlSearchParams = require('../../lib/to-url-search-params.js');\n\nconst decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid$1\n}) => {\n  return {\n    cid: cid.CID.parse(cid$1),\n    name,\n    status\n  };\n};\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nconst encodeCID = cid$1 => {\n  if (cid.CID.asCID(cid$1)) {\n    return cid$1.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${ typeof cid$1 }`);\n  }\n};\nconst encodeQuery = ({service, cid, name, status, all}) => {\n  const query = toUrlSearchParams.toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\nconst encodeAddParams = ({cid, service, background, name, origins}) => {\n  const params = toUrlSearchParams.toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};\n\nexports.decodePin = decodePin;\nexports.encodeAddParams = encodeAddParams;\nexports.encodeCID = encodeCID;\nexports.encodeQuery = encodeQuery;\nexports.encodeService = encodeService;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACrC,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AAEpE,MAAME,SAAS,GAAGA,CAAC;EACjBC,IAAI,EAAEC,IAAI;EACVC,MAAM,EAAEC,MAAM;EACdC,GAAG,EAAEC;AACP,CAAC,KAAK;EACJ,OAAO;IACLT,GAAG,EAAEA,GAAG,CAACU,GAAG,CAACC,KAAK,CAACF,KAAK,CAAC;IACzBJ,IAAI;IACJE;EACF,CAAC;AACH,CAAC;AACD,MAAMK,aAAa,GAAGC,OAAO,IAAI;EAC/B,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,EAAE,EAAE;IACjD,OAAOA,OAAO;EAChB,CAAC,MAAM;IACL,MAAM,IAAIC,SAAS,CAAC,6BAA6B,CAAC;EACpD;AACF,CAAC;AACD,MAAMC,SAAS,GAAGN,KAAK,IAAI;EACzB,IAAIT,GAAG,CAACU,GAAG,CAACM,KAAK,CAACP,KAAK,CAAC,EAAE;IACxB,OAAOA,KAAK,CAACQ,QAAQ,CAAC,CAAC;EACzB,CAAC,MAAM;IACL,MAAM,IAAIH,SAAS,CAAC,oCAAqC,OAAOL,KAAK,EAAG,CAAC;EAC3E;AACF,CAAC;AACD,MAAMS,WAAW,GAAGA,CAAC;EAACL,OAAO;EAAEb,GAAG;EAAEK,IAAI;EAAEE,MAAM;EAAEY;AAAG,CAAC,KAAK;EACzD,MAAMC,KAAK,GAAGlB,iBAAiB,CAACA,iBAAiB,CAAC;IAChDW,OAAO,EAAED,aAAa,CAACC,OAAO,CAAC;IAC/BR,IAAI;IACJgB,KAAK,EAAEF,GAAG,GAAG,IAAI,GAAGG;EACtB,CAAC,CAAC;EACF,IAAItB,GAAG,EAAE;IACP,KAAK,MAAMD,KAAK,IAAIC,GAAG,EAAE;MACvBoB,KAAK,CAACG,MAAM,CAAC,KAAK,EAAER,SAAS,CAAChB,KAAK,CAAC,CAAC;IACvC;EACF;EACA,IAAIQ,MAAM,EAAE;IACV,KAAK,MAAMR,KAAK,IAAIQ,MAAM,EAAE;MAC1Ba,KAAK,CAACG,MAAM,CAAC,QAAQ,EAAExB,KAAK,CAAC;IAC/B;EACF;EACA,OAAOqB,KAAK;AACd,CAAC;AACD,MAAMI,eAAe,GAAGA,CAAC;EAACxB,GAAG;EAAEa,OAAO;EAAEY,UAAU;EAAEpB,IAAI;EAAEqB;AAAO,CAAC,KAAK;EACrE,MAAMC,MAAM,GAAGzB,iBAAiB,CAACA,iBAAiB,CAAC;IACjD0B,GAAG,EAAEb,SAAS,CAACf,GAAG,CAAC;IACnBa,OAAO,EAAED,aAAa,CAACC,OAAO,CAAC;IAC/BR,IAAI;IACJoB,UAAU,EAAEA,UAAU,GAAG,IAAI,GAAGH;EAClC,CAAC,CAAC;EACF,IAAII,OAAO,EAAE;IACX,KAAK,MAAMG,MAAM,IAAIH,OAAO,EAAE;MAC5BC,MAAM,CAACJ,MAAM,CAAC,QAAQ,EAAEM,MAAM,CAACZ,QAAQ,CAAC,CAAC,CAAC;IAC5C;EACF;EACA,OAAOU,MAAM;AACf,CAAC;AAED7B,OAAO,CAACK,SAAS,GAAGA,SAAS;AAC7BL,OAAO,CAAC0B,eAAe,GAAGA,eAAe;AACzC1B,OAAO,CAACiB,SAAS,GAAGA,SAAS;AAC7BjB,OAAO,CAACoB,WAAW,GAAGA,WAAW;AACjCpB,OAAO,CAACc,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script"}